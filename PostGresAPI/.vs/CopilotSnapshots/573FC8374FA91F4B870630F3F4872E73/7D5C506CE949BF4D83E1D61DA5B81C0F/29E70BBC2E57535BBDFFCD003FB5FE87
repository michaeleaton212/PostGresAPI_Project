using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using PostGresAPI.Models;
using PostGresAPI.Repository;
using PostGresAPI.Contracts;
using PostGresAPI.Extensions;

namespace PostGresAPI.Services;

public class RoomService : IRoomService
{
    private readonly IRoomRepository _repo;

    public RoomService(IRoomRepository repo) => _repo = repo; //Constructor Injection: the object must implement interface

    // Read (alle Filter-/Mapping-Logik liegt hier im Service)
    public async Task<List<RoomDto>> GetAll(string? type = null)
    {
        if (string.IsNullOrWhiteSpace(type))
        {
            var rooms = await _repo.GetAll();
            return rooms.Select(MapToDto).ToList();
        }

        if (type.Equals("Meetingroom", StringComparison.OrdinalIgnoreCase))
        {
            var meetingrooms = await _repo.GetMeetingrooms();
            return meetingrooms.Select(m => new RoomDto(m.Id, m.Name, "Meetingroom")).ToList();
        }

        if (type.Equals("Bedroom", StringComparison.OrdinalIgnoreCase))
        {
            var bedrooms = await _repo.GetBedrooms();
            return bedrooms.Select(b => new RoomDto(b.Id, b.Name, "Bedroom")).ToList();
        }

        // unknown type -> return empty list
        return new List<RoomDto>();
    }

    public async Task<RoomDto?> GetById(int id)
    {
        var room = await _repo.GetById(id);
        return room is null ? null : MapToDto(room);
    }

    // Create
    public async Task<RoomDto> CreateMeetingroom(CreateMeetingroomDto createMeetingroomDto)
    {
        var entity = createMeetingroomDto.ToEntity();
        var created = await _repo.Add(entity);
        return MapToDto(created);
    }

    public async Task<RoomDto> CreateBedroom(CreateBedroomDto createBedroomDto)
    {
        var entity = createBedroomDto.ToEntity();
        var created = await _repo.Add(entity);
        return MapToDto(created);
    }

    // Update
    public async Task<RoomDto?> UpdateName(int id, string name)
    {
        var updated = await _repo.UpdateName(id, name);
        return updated is null ? null : MapToDto(updated);
    }

    // Delete
    public Task<bool> Delete(int id) => _repo.Delete(id);

    // Mapping
    private static RoomDto MapToDto(Room r) =>
        r switch
        {
            Meetingroom m => new RoomDto(m.Id, m.Name, "Meetingroom"),
            Bedroom b => new RoomDto(b.Id, b.Name, "Bedroom"),
            _ => new RoomDto(r.Id, r.Name, r.GetType().Name)
        };
}