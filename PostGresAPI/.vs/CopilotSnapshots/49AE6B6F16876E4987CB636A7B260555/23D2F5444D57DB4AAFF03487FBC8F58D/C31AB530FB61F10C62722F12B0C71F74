using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using PostGresAPI.Models;
using PostGresAPI.Repository;
using PostGresAPI.Contracts;
using PostGresAPI.Extensions;

namespace PostGresAPI.Services;

public class RoomService : IRoomService
{
    private readonly IRoomRepository _repo;

    public RoomService(IRoomRepository repo) => _repo = repo; //Constructor Injection: the object must implement interface

    // Read (alle Filter-/Mapping-Logik liegt hier im Service)
    public async Task<List<RoomDto>> GetAll(string? type = null)
    {
        if (string.IsNullOrWhiteSpace(type))
        {
            var rooms = await _repo.GetAll();
            return rooms.Select(r => r.ToDto()).ToList();
        }

        if (type.Equals("Meetingroom", StringComparison.OrdinalIgnoreCase))
        {
            var meetingrooms = await _repo.GetMeetingrooms();
            return meetingrooms.Select(m => m.ToDto()).ToList();
        }

        if (type.Equals("Bedroom", StringComparison.OrdinalIgnoreCase))
        {
            var bedrooms = await _repo.GetBedrooms();
            return bedrooms.Select(b => b.ToDto()).ToList();
        }

        // unknown type -> return empty list
        return new List<RoomDto>();
    }

    public async Task<RoomDto?> GetById(int id)
    {
        var room = await _repo.GetById(id);
        return room is null ? null : room.ToDto();
    }

    // Create
    public async Task<RoomDto> CreateMeetingroom(string name, int numberOfChairs)
    {
        var entity = new Meetingroom(name, numberOfChairs);
        var created = await _repo.Add(entity);
        return created.ToDto();
    }

    public async Task<RoomDto> CreateBedroom(string name, int numberOfBeds)
    {
        var entity = new Bedroom(name, numberOfBeds);
        var created = await _repo.Add(entity);
        return created.ToDto();
    }

    // Update
    public async Task<RoomDto?> UpdateName(int id, string name)
    {
        var updated = await _repo.UpdateName(id, name);
        return updated is null ? null : updated.ToDto();
    }

    // Delete
    public Task<bool> Delete(int id) => _repo.Delete(id);

    // Mapping removed - use extension methods in Extensions/RoomExtensions.cs
}